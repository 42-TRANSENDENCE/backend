var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.349,1,2.122]],["body/controllers/AppController.html",[0,2.016,1,3.171,2,1.686,3,0.377,4,0.377,5,0.331,6,3.145,7,0.697,8,1.721,9,1.767,10,4.869,11,3.753,12,2.006,13,0.03,14,3.753,15,1.721,16,1.135,17,3.753,18,1.326,19,1.326,20,1.135,21,2.603,22,1.326,23,1.326,24,0.723,25,2.444,26,2.444,27,0.526,28,3.753,29,2.006,30,2.889,31,3.145,32,1.836,33,3.753,34,2.444,35,0.377,36,0.287,37,2.205,38,1.435,39,3.753,40,2.444,41,3.753,42,3.753,43,1.227,44,2.744,45,0.022,46,0.022]],["title/modules/AppModule.html",[47,1.464,48,2.122]],["body/modules/AppModule.html",[1,3.068,2,1.824,3,0.289,4,0.289,5,0.254,13,0.03,24,0.757,27,0.403,30,2.998,31,2.406,35,0.289,36,0.22,45,0.019,46,0.019,47,1.824,48,4.037,49,1.404,50,2.17,51,2.406,52,2.406,53,2.406,54,3.295,55,3.295,56,2.998,57,2.644,58,1.87,59,1.687,60,2.871,61,2.968,62,2.644,63,4.06,64,2.406,65,1.189,66,4.06,67,2.406,68,3.402,69,2.871,70,2.871,71,2.871,72,2.871,73,2.871,74,2.871,75,1.29,76,2.871,77,2.871,78,2.871,79,6.072,80,2.871,81,2.871,82,2.871,83,2.871,84,2.871,85,2.871,86,2.871,87,2.871,88,2.406,89,2.871,90,2.406,91,2.871,92,2.871,93,2.871,94,2.871,95,2.871,96,2.871,97,2.871]],["title/injectables/AppService.html",[30,1.741,98,0.288]],["body/injectables/AppService.html",[3,0.48,4,0.48,5,0.421,13,0.029,24,0.604,27,0.669,30,3.021,35,0.48,36,0.365,45,0.026,46,0.026,98,0.499,99,1.443,100,3.998]],["title/controllers/AuthController.html",[0,1.349,101,2.122]],["body/controllers/AuthController.html",[0,0.78,2,0.846,3,0.189,4,0.189,5,0.166,7,0.35,8,1.047,9,1.566,12,1.957,13,0.031,15,1.931,16,1.107,18,1.294,19,1.294,20,1.107,21,2.679,22,1.294,23,0.666,24,0.634,26,1.227,27,0.264,29,1.007,32,0.921,34,1.929,35,0.189,36,0.144,38,1.132,40,1.227,43,0.968,44,2.676,45,0.014,46,0.014,101,1.929,102,1.578,103,1.377,104,1.884,105,2.962,106,2.962,107,3.137,108,1.884,109,1.884,110,1.884,111,1.929,112,2.962,113,5.191,114,2.962,115,4.791,116,4.791,117,2.962,118,2.482,119,1.884,120,1.884,121,1.884,122,2.962,123,3.904,124,1.74,125,1.884,126,1.884,127,1.884,128,2.482,129,2.962,130,1.578,131,1.578,132,1.578,133,1.578,134,1.578,135,1.377,136,1.377,137,1.107,138,0.921,139,1.399,140,1.007,141,1.227,142,1.884,143,1.884,144,2.482,145,1.227,146,1.884,147,1.884,148,1.578,149,0.78,150,1.449,151,1.884,152,1.578,153,2.482,154,1.884,155,1.984,156,2.03,157,0.896,158,1.516,159,1.377,160,2.482,161,2.962,162,1.107,163,2.482,164,1.884,165,1.884,166,3.067,167,1.578,168,1.884,169,1.884,170,1.884,171,2.962,172,1.884,173,1.884,174,1.884,175,1.884]],["title/modules/AuthModule.html",[47,1.464,54,1.914]],["body/modules/AuthModule.html",[2,1.707,3,0.263,4,0.263,5,0.231,13,0.031,24,0.784,27,0.367,35,0.263,36,0.2,45,0.017,46,0.017,47,1.707,49,1.28,50,2.03,54,3.746,56,2.906,57,2.474,58,1.704,59,1.537,61,2.777,62,2.474,101,2.912,139,2.329,140,2.03,157,0.791,176,2.192,177,2.617,178,2.192,179,2.192,180,3.194,181,3.194,182,3.194,183,3.194,184,2.659,185,2.617,186,2.912,187,3.183,188,2.617,189,2.617,190,3.799,191,2.617,192,1.913,193,2.617,194,3.799,195,2.617,196,1.913,197,1.398,198,2.617,199,3.183,200,1.537,201,2.617,202,1.709,203,2.623,204,2.03,205,2.617,206,2.192,207,2.617]],["title/injectables/AuthService.html",[98,0.288,139,1.245]],["body/injectables/AuthService.html",[3,0.202,4,0.202,5,0.178,7,0.374,8,1.102,9,1.248,13,0.031,15,1.645,16,1.408,18,1.52,19,1.52,20,1.301,22,1.52,23,0.711,24,0.704,27,0.282,35,0.202,36,0.154,38,1.644,43,1.406,45,0.014,46,0.014,65,0.833,88,1.686,90,1.686,98,0.275,99,0.609,107,1.182,111,1.31,139,1.192,149,1.291,150,2.104,155,1.882,156,2.276,157,0.609,158,0.833,162,2.244,163,3.2,192,1.471,197,1.076,200,1.182,208,1.686,209,4.302,210,3.819,211,3.119,212,3.119,213,2.012,214,4.924,215,2.512,216,3.2,217,3.604,218,4.304,219,2.012,220,1.027,221,2.012,222,2.012,223,2.632,224,3.604,225,2.012,226,1.471,227,1.471,228,2.28,229,2.091,230,3.119,231,2.012,232,3.119,233,2.012,234,1.471,235,1.686,236,2.012,237,1.31,238,1.686,239,2.613,240,1.471,241,2.613,242,1.471,243,1.868,244,1.31,245,1.686,246,2.031,247,2.012,248,3.119,249,2.031,250,2.012,251,3.119,252,2.012,253,2.012,254,4.302,255,4.302,256,4.302,257,3.119,258,2.012,259,2.012,260,2.012,261,1.471,262,3.119,263,2.613,264,2.012,265,2.012,266,2.012,267,2.012,268,1.471,269,1.686,270,1.686,271,1.31,272,1.076,273,2.012]],["title/classes/CreateUserDto.html",[36,0.249,274,1.914]],["body/classes/CreateUserDto.html",[3,0.41,4,0.41,5,0.36,7,0.756,12,2.177,13,0.03,16,1.232,24,0.649,29,2.177,35,0.41,36,0.393,45,0.023,46,0.023,220,0.973,229,2.305,274,3.015,275,4.074,276,3.413,277,2.305,278,3.658,279,4.074,280,5.131,281,5.131,282,4.074,283,4.074,284,4.299,285,4.074,286,5.131,287,4.074,288,4.074,289,3.413,290,4.074,291,4.074,292,3.413,293,4.074]],["title/modules/DatabaseModule.html",[47,1.464,55,1.914]],["body/modules/DatabaseModule.html",[3,0.395,4,0.395,5,0.347,13,0.03,24,0.699,27,0.551,35,0.395,36,0.301,45,0.023,46,0.023,47,2.254,49,1.922,55,2.947,62,3.266,64,4.202,65,1.627,75,1.766,196,2.873,197,2.1,215,2.846,220,0.938,294,3.93,295,3.93,296,3.93,297,3.93,298,3.93,299,3.93,300,3.93,301,3.93,302,3.93,303,3.93,304,3.93,305,3.93,306,3.93,307,3.93,308,3.93,309,2.873,310,3.93,311,3.93,312,3.93]],["title/injectables/FourtyTwoGuard.html",[98,0.288,141,2.122]],["body/injectables/FourtyTwoGuard.html",[3,0.46,4,0.46,5,0.404,13,0.029,24,0.697,27,0.642,35,0.46,36,0.35,45,0.025,46,0.025,98,0.487,99,1.384,141,3.59,202,1.749,313,3.834,314,3.834,315,2.98,316,1.894,317,2.056,318,4.576]],["title/injectables/FourtyTwoStrategy.html",[98,0.288,180,1.914]],["body/injectables/FourtyTwoStrategy.html",[3,0.356,4,0.356,5,0.313,7,0.658,8,1.656,9,1.717,13,0.03,15,1.251,16,1.418,18,1.656,19,1.656,20,1.418,22,1.251,23,1.251,24,0.707,27,0.497,35,0.356,36,0.271,37,2.08,43,1.157,45,0.021,46,0.021,98,0.414,99,1.071,139,2.284,140,1.893,149,1.466,180,2.754,202,1.354,220,1.119,229,2.361,268,2.589,316,1.466,317,1.591,319,4.402,320,2.967,321,2.754,322,3.541,323,3.541,324,4.687,325,3.541,326,3.052,327,3.052,328,2.08,329,2.967,330,3.541,331,2.306,332,3.541]],["title/injectables/JwtAuthGuard.html",[32,1.593,98,0.288]],["body/injectables/JwtAuthGuard.html",[3,0.462,4,0.462,5,0.406,13,0.03,24,0.699,27,0.645,32,2.703,35,0.462,36,0.352,45,0.025,46,0.025,98,0.488,99,1.39,315,2.994,316,1.903,317,2.065,333,2.701,334,3.36,335,3.36]],["title/injectables/JwtRefreshAuthGuard.html",[98,0.288,145,2.122]],["body/injectables/JwtRefreshAuthGuard.html",[3,0.458,4,0.458,5,0.402,13,0.029,24,0.695,27,0.639,35,0.458,36,0.349,45,0.025,46,0.025,98,0.486,99,1.378,107,3.23,145,3.58,315,2.966,316,1.886,317,2.047,333,2.676,334,3.33,335,3.33]],["title/injectables/JwtRefreshStrategy.html",[98,0.288,181,1.914]],["body/injectables/JwtRefreshStrategy.html",[3,0.3,4,0.3,5,0.263,7,0.554,8,1.474,9,1.572,13,0.03,15,1.054,16,1.261,18,1.474,19,1.474,20,1.261,21,1.594,22,1.054,23,1.054,24,0.737,25,3.697,27,0.418,35,0.3,36,0.228,43,1.363,45,0.019,46,0.019,65,1.235,75,1.34,98,0.368,99,0.902,107,1.752,124,2.45,137,1.575,138,1.459,149,1.726,150,2.039,155,1.14,162,2.45,181,2.45,215,2.777,220,0.996,243,2.546,244,1.942,246,3.131,316,1.235,317,1.34,321,2.45,326,2.716,327,2.716,328,1.752,331,1.942,336,3.515,337,2.499,338,2.18,339,3.131,340,2.983,341,3.494,342,2.983,343,1.594,344,2.18,345,2.18,346,2.18,347,2.983,348,2.18,349,2.983,350,2.499,351,2.983,352,2.983,353,2.983]],["title/injectables/JwtStrategy.html",[98,0.288,182,1.914]],["body/injectables/JwtStrategy.html",[3,0.311,4,0.311,5,0.273,7,0.574,8,1.511,9,1.603,13,0.03,15,1.093,16,1.294,18,1.511,19,1.511,20,1.294,22,1.093,23,1.093,24,0.744,25,3.193,27,0.434,35,0.311,36,0.237,38,1.635,43,1.398,45,0.02,46,0.02,65,1.28,75,1.39,98,0.378,99,0.935,124,2.513,137,1.6,138,1.513,149,1.771,150,2.092,155,1.182,157,1.294,158,1.28,182,2.513,215,2.808,220,1.021,243,2.587,244,2.014,246,2.014,316,1.28,317,1.39,321,2.513,326,2.014,327,2.014,328,1.817,331,2.014,338,2.261,339,3.193,343,1.653,344,2.261,345,2.261,346,2.261,348,2.261,350,2.591,354,2.591,355,3.093,356,3.583,357,3.093,358,3.093,359,2.591,360,2.591,361,2.591]],["title/injectables/JwtTwoFactorGuard.html",[98,0.288,362,1.914]],["body/injectables/JwtTwoFactorGuard.html",[3,0.458,4,0.458,5,0.402,13,0.029,24,0.695,27,0.639,35,0.458,36,0.349,45,0.025,46,0.025,98,0.486,99,1.378,202,1.741,315,2.966,316,1.886,317,2.047,333,2.676,335,3.33,362,3.23,363,3.816,364,3.33]],["title/injectables/JwtTwoFactorStrategy.html",[98,0.288,183,1.914]],["body/injectables/JwtTwoFactorStrategy.html",[3,0.296,4,0.296,5,0.26,7,0.547,8,1.461,9,1.562,13,0.031,15,1.041,16,1.251,18,1.461,19,1.461,20,1.251,21,1.575,22,1.041,23,1.041,24,0.735,25,3.111,27,0.413,35,0.296,36,0.226,38,1.581,43,1.562,45,0.019,46,0.019,65,1.22,98,0.365,99,0.891,124,2.43,137,1.567,138,1.441,149,1.712,150,2.023,155,1.127,157,1.445,158,1.22,167,2.469,183,2.43,202,1.826,215,2.766,220,0.987,243,2.533,244,1.919,246,1.919,316,1.22,317,1.324,321,2.43,326,2.693,327,2.693,328,1.732,331,1.919,336,3.493,338,2.155,339,3.111,343,1.575,344,2.155,345,2.155,346,2.155,348,2.155,356,3.465,359,2.469,360,2.469,361,2.469,364,2.155,365,2.469,366,2.947,367,2.947,368,2.947]],["title/interfaces/QRCodeUrl.html",[369,1.464,370,2.122]],["body/interfaces/QRCodeUrl.html",[3,0.311,4,0.311,5,0.273,7,0.574,9,1.603,13,0.03,15,1.511,24,0.744,27,0.434,35,0.43,36,0.237,37,1.817,38,1.182,43,1.398,45,0.02,46,0.02,65,1.28,98,0.378,137,1.483,138,1.513,139,1.182,140,1.653,155,1.874,157,0.935,158,1.771,159,2.261,184,1.513,202,1.182,203,2.827,204,1.653,215,1.513,220,0.738,223,2.286,229,2.495,234,2.261,249,2.785,261,2.261,271,2.014,272,1.653,277,1.922,369,1.39,370,2.785,371,2.014,372,1.817,373,2.261,374,4.198,375,2.014,376,3.127,377,1.653,378,2.261,379,2.591,380,2.591,381,2.591,382,2.591,383,2.591,384,2.591,385,2.261,386,3.127,387,2.591,388,2.591,389,3.583,390,2.591,391,2.591,392,2.591,393,2.591,394,2.591,395,2.591]],["title/interfaces/TokenPayload.html",[243,1.593,369,1.464]],["body/interfaces/TokenPayload.html",[3,0.44,4,0.44,5,0.387,7,0.813,13,0.029,20,1.622,35,0.44,45,0.025,46,0.025,156,2.958,220,1.281,223,3.101,224,5.067,243,2.624,277,2.41,369,1.966,371,2.85,396,3.666,397,3.666,398,4.861]],["title/controllers/TwoFactorAuthController.html",[0,1.349,186,2.122]],["body/controllers/TwoFactorAuthController.html",[0,0.928,2,1.007,3,0.225,4,0.225,5,0.198,7,0.416,8,1.197,9,1.929,12,2.432,13,0.03,16,1.376,18,1.608,19,1.608,20,1.376,21,3.006,22,1.608,23,0.792,24,0.695,26,1.46,27,0.314,29,1.198,32,1.096,34,1.46,35,0.225,36,0.172,38,1.561,40,2.659,43,0.733,45,0.015,46,0.015,75,1.007,103,1.639,123,1.639,131,1.878,132,1.878,133,1.878,134,1.878,135,1.639,136,1.639,137,1.235,138,1.096,139,1.561,140,1.811,144,2.838,148,1.878,149,0.928,150,1.997,153,3.421,155,1.295,158,1.884,160,2.838,166,1.878,184,1.997,186,2.206,202,1.561,203,3.154,204,2.612,220,0.535,321,1.99,341,1.878,362,1.317,364,1.639,372,2.871,375,3.182,377,2.852,378,1.639,399,1.878,400,3.388,401,3.388,402,3.388,403,2.242,404,2.242,405,2.242,406,2.242,407,4.551,408,2.242,409,2.242,410,2.242,411,2.242,412,2.242,413,2.242,414,2.242,415,1.878,416,2.242,417,2.242,418,2.242,419,2.242,420,3.388,421,2.242,422,4.083,423,2.242,424,2.242,425,2.242,426,2.242,427,2.242,428,2.242,429,2.242,430,2.242,431,2.242,432,2.242,433,1.878,434,2.242,435,2.242]],["title/injectables/TwoFactorAuthService.html",[98,0.288,184,1.593]],["body/injectables/TwoFactorAuthService.html",[3,0.249,4,0.249,5,0.219,7,0.461,8,1.291,9,1.889,13,0.03,15,1.691,16,1.447,18,1.691,19,1.691,20,1.447,22,1.532,23,1.291,24,0.698,27,0.348,35,0.367,36,0.19,37,1.457,38,0.948,43,1.194,45,0.017,46,0.017,65,1.027,98,0.323,99,0.75,137,1.613,138,1.213,139,0.948,140,1.326,149,1.027,155,1.658,156,1.787,157,0.75,158,1.512,159,1.813,184,1.787,202,0.948,203,3.222,204,2.726,215,1.213,220,1.142,223,2.851,229,2.479,234,1.813,249,2.379,261,1.813,271,1.615,272,1.326,369,1.115,370,1.615,372,2.996,373,1.813,374,3.17,375,1.615,376,2.671,377,1.326,378,1.813,379,3.061,380,2.078,381,2.078,382,2.078,383,2.078,384,2.078,385,2.671,386,3.497,387,2.078,388,3.061,389,3.061,390,2.078,391,2.078,392,2.078,393,2.078,394,2.078,395,2.078,436,3.653,437,3.653,438,3.653,439,2.48,440,2.48,441,2.48,442,2.48,443,2.48,444,2.48]],["title/entities/User.html",[157,0.985,445,2.382]],["body/entities/User.html",[3,0.274,4,0.274,5,0.241,7,0.506,12,3.034,13,0.03,16,1.717,20,1.512,24,0.494,35,0.393,36,0.299,45,0.018,46,0.018,75,2.379,156,2.237,157,1.183,220,1.412,223,2.09,226,3.344,228,3.654,229,2.476,237,1.773,277,1.757,278,2.979,309,1.991,398,3.276,445,2.858,446,1.991,447,3.344,448,3.833,449,3.833,450,4.574,451,3.833,452,3.91,453,3.91,454,3.91,455,4.999,456,2.723,457,3.91,458,2.723,459,2.723,460,4.574,461,2.723,462,2.723,463,2.723,464,2.723,465,2.723,466,4.436,467,5.294,468,2.723,469,2.723,470,2.723,471,3.91,472,2.282,473,5.677,474,3.276,475,3.276,476,3.276,477,2.723,478,2.723]],["title/controllers/UsersController.html",[0,1.349,479,2.122]],["body/controllers/UsersController.html",[0,0.745,2,0.808,3,0.181,4,0.181,5,0.357,7,0.334,8,1.009,9,1.535,12,2.162,13,0.031,15,1.255,16,1.224,18,1.429,19,1.429,20,1.224,21,2.993,22,1.429,23,1.009,24,0.623,26,1.172,27,0.252,29,0.962,32,0.88,34,1.172,35,0.181,36,0.138,37,1.057,38,0.688,40,1.172,43,1.322,44,2.088,45,0.013,46,0.013,75,0.808,103,1.315,111,1.86,128,3.389,130,1.507,135,1.315,136,1.315,137,0.864,152,1.507,155,1.358,156,1.397,157,1.335,158,0.745,162,1.057,202,0.688,220,0.848,272,2.162,274,1.678,278,1.172,333,1.678,339,1.172,343,1.527,362,1.057,375,2.874,385,2.957,415,1.507,433,2.977,447,3.226,479,1.86,480,1.507,481,1.799,482,2.393,483,2.393,484,2.857,485,2.977,486,1.799,487,1.799,488,4.046,489,1.799,490,1.799,491,1.799,492,1.799,493,4.924,494,2.857,495,1.799,496,1.799,497,1.799,498,1.799,499,1.799,500,1.799,501,1.799,502,3.553,503,1.799,504,2.857,505,2.857,506,2.857,507,2.857,508,2.857,509,2.857,510,2.857,511,1.799,512,1.799,513,2.857,514,2.857,515,2.857,516,1.799,517,1.799,518,2.857,519,1.799,520,1.507,521,4.413,522,1.799,523,1.507,524,1.799,525,1.799,526,1.799,527,4.046,528,3.553,529,3.553,530,2.977,531,1.507,532,1.799,533,1.799,534,1.799,535,1.799,536,1.799,537,1.799,538,1.799,539,1.799,540,2.857,541,1.799,542,1.799,543,2.857,544,1.799,545,1.799,546,1.799,547,1.799,548,1.799,549,1.799,550,1.799,551,1.799,552,1.799,553,2.857,554,1.799,555,1.799,556,1.799,557,1.799,558,1.799,559,1.799,560,1.799,561,1.799,562,1.799,563,2.857,564,1.507,565,1.799,566,1.799,567,1.799,568,1.799]],["title/modules/UsersModule.html",[47,1.464,56,1.741]],["body/modules/UsersModule.html",[2,2.151,3,0.368,4,0.368,5,0.323,13,0.03,24,0.763,27,0.513,35,0.368,36,0.28,45,0.022,46,0.022,47,2.151,49,1.789,50,2.559,56,3.284,57,3.118,58,2.382,59,2.149,61,3.5,62,2.382,137,1.95,157,1.106,187,4.011,196,2.674,197,1.955,199,4.011,200,2.149,206,3.064,479,3.476,523,3.064,569,3.064,570,3.064,571,3.064,572,3.657,573,3.657,574,3.064]],["title/injectables/UsersService.html",[98,0.288,137,0.985]],["body/injectables/UsersService.html",[3,0.124,4,0.124,5,0.109,7,0.23,8,0.742,9,1.995,13,0.031,16,1.548,18,1.77,19,1.77,20,1.515,22,1.726,23,1.139,24,0.556,27,0.174,35,0.124,36,0.095,38,0.802,43,1.499,45,0.01,46,0.01,75,0.556,98,0.185,99,0.374,118,1.037,137,0.635,149,0.869,150,1.765,155,1.915,156,2.844,157,1.331,158,2.074,162,1.607,197,0.661,200,0.727,216,1.759,217,2.7,218,3.503,220,1.222,223,3.225,226,0.904,227,0.904,228,0.904,229,2.3,235,1.037,237,0.806,238,1.037,239,1.759,240,0.904,241,1.759,242,0.904,245,1.037,249,2.099,263,3.286,269,1.037,270,1.037,271,2.35,272,2.235,274,1.233,277,0.943,278,1.781,386,1.535,447,2.356,448,2.7,449,1.759,451,1.759,482,1.759,483,1.759,485,1.759,574,1.037,575,1.037,576,3.922,577,2.1,578,2.1,579,2.1,580,2.1,581,2.1,582,2.1,583,2.1,584,2.1,585,1.237,586,2.1,587,2.1,588,1.237,589,2.1,590,1.237,591,4.585,592,2.1,593,1.237,594,2.1,595,1.237,596,2.1,597,1.237,598,2.1,599,1.237,600,2.1,601,1.237,602,2.1,603,1.237,604,2.1,605,1.237,606,2.1,607,1.237,608,2.1,609,2.735,610,1.237,611,2.1,612,2.1,613,2.735,614,2.1,615,1.759,616,3.922,617,1.237,618,1.237,619,2.1,620,2.1,621,1.237,622,1.237,623,1.237,624,1.237,625,1.237,626,1.237,627,1.237,628,2.1,629,1.237,630,1.237,631,2.1,632,2.1,633,2.1,634,1.237,635,1.237,636,2.1,637,1.237,638,1.237,639,1.237,640,1.237,641,1.237,642,1.237,643,1.237,644,2.1,645,1.237,646,1.237]],["title/coverage.html",[647,3.713]],["body/coverage.html",[0,2.085,1,1.803,5,0.245,6,2.319,13,0.03,30,1.48,32,1.354,36,0.212,45,0.018,46,0.018,98,0.544,100,2.319,101,1.803,102,2.319,107,1.626,137,0.837,139,1.058,141,1.803,145,1.803,157,0.837,180,1.626,181,1.626,182,1.626,183,1.626,184,1.354,186,1.803,202,1.512,203,3.118,204,2.692,208,2.319,220,0.661,243,1.354,272,1.48,274,1.626,276,2.319,313,2.319,314,2.319,319,2.319,320,2.319,333,2.712,334,2.892,336,2.892,337,2.319,354,2.319,362,1.626,363,2.319,365,2.319,369,2.074,370,1.803,372,2.959,373,2.892,377,1.48,396,2.319,397,2.319,399,2.319,445,2.024,446,2.024,479,1.803,480,2.319,575,2.319,647,2.319,648,2.319,649,2.768,650,2.768,651,6.467,652,5.037,653,5.705,654,2.768,655,2.768,656,2.768,657,5.328,658,4.616,659,2.319,660,2.319,661,2.768,662,2.319,663,2.768,664,2.768,665,2.768]],["title/dependencies.html",[50,2.092,666,2.285]],["body/dependencies.html",[13,0.031,27,0.491,29,1.873,36,0.356,45,0.021,46,0.021,50,1.873,65,1.451,67,2.936,68,2.936,123,2.561,124,2.059,192,2.561,197,1.873,200,2.059,237,2.282,240,2.561,242,2.561,268,2.561,289,2.936,316,1.451,328,3.272,329,2.936,343,1.873,374,2.561,376,2.561,472,2.936,520,2.936,615,2.936,667,4.654,668,5.226,669,3.504,670,3.504,671,3.504,672,3.504,673,3.504,674,3.504,675,3.504,676,3.504,677,3.504,678,3.504,679,3.504,680,3.504,681,3.504,682,3.504,683,3.504,684,3.504,685,3.504,686,3.504,687,3.504,688,3.504,689,3.504,690,3.504,691,3.504,692,3.504,693,3.504,694,3.504,695,3.504,696,3.504,697,3.504,698,3.504]],["title/miscellaneous/enumerations.html",[699,1.776,700,3.28]],["body/miscellaneous/enumerations.html",[7,0.842,13,0.029,45,0.025,46,0.025,227,4.475,446,3.315,466,4.593,474,4.593,475,4.593,476,4.593,699,2.953,700,3.799,701,5.482,702,4.535,703,4.535,704,4.535,705,4.535,706,4.535]],["title/miscellaneous/functions.html",[699,1.776,707,3.28]],["body/miscellaneous/functions.html",[7,0.921,13,0.026,45,0.026,46,0.026,660,4.157,662,5.128,699,3.231,707,4.157,708,4.961]],["title/index.html",[7,0.507,709,2.285,710,2.285]],["body/index.html",[13,0.027,45,0.027,46,0.027,111,3.788,531,4.873,711,5.011,712,5.011]],["title/license.html",[709,2.285,710,2.285,713,1.994]],["body/license.html",[13,0.021,45,0.021,46,0.021,59,2.051,343,1.866,648,2.925,713,2.552,714,3.492,715,5.217,716,3.492,717,3.492,718,3.492,719,3.492,720,4.644,721,3.492,722,3.492,723,3.492,724,3.492,725,3.492,726,3.492,727,4.644,728,6.246,729,3.492,730,3.492,731,3.492,732,5.217,733,3.492,734,4.644,735,3.492,736,3.492,737,4.644,738,3.492,739,3.492,740,3.492,741,3.492,742,3.492,743,3.492,744,3.492,745,4.644,746,3.492,747,3.492,748,3.492,749,3.492,750,3.492,751,3.492,752,3.492,753,4.644,754,4.644,755,3.492,756,3.492,757,3.492,758,3.492,759,3.492,760,3.492,761,3.492,762,3.492,763,3.492,764,3.492,765,3.492,766,3.492,767,3.492,768,3.492,769,3.492,770,3.492,771,3.492,772,3.492,773,3.492,774,3.492,775,3.492,776,3.492,777,3.492,778,3.492,779,3.492,780,3.492,781,3.492,782,3.492,783,3.492]],["title/modules.html",[49,2.168]],["body/modules.html",[13,0.026,45,0.026,46,0.026,48,3.05,49,2.29,54,2.751,55,2.751,56,2.503,784,5.974,785,5.974,786,5.974,787,6.188,788,4.683,789,4.683]],["title/overview.html",[790,3.713]],["body/overview.html",[2,1.471,13,0.03,30,2.7,36,0.251,45,0.02,46,0.02,48,4.06,49,1.602,50,2.377,51,2.744,52,2.744,53,2.744,54,3.834,55,2.967,56,3.195,57,2.897,58,2.133,59,1.924,99,0.99,137,1.808,139,2.285,176,2.744,178,2.744,179,2.744,180,2.967,181,2.967,182,2.967,183,2.967,184,2.47,284,2.744,292,3.727,309,2.394,371,2.133,564,2.744,569,2.744,570,2.744,571,2.744,790,2.744,791,4.448]],["title/properties.html",[277,1.759,666,2.285]],["body/properties.html",[13,0.03,45,0.026,46,0.026,277,2.196,530,4.096,713,3.574,792,4.889,793,4.889,794,4.889,795,4.889]],["title/interfaces/twoFactorToken.html",[369,1.464,377,1.741]],["body/interfaces/twoFactorToken.html",[3,0.456,4,0.456,5,0.401,7,0.842,13,0.029,15,2.163,35,0.456,45,0.025,46,0.025,203,2.93,204,2.424,220,1.083,229,2.647,277,2.463,369,2.037,371,2.953,372,2.664,377,2.93,659,3.799]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/FourtyTwoGuard.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"interfaces/TokenPayload.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/twoFactorToken.html":{}}}],["0",{"_index":651,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":793,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":696,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["0.3.12",{"_index":698,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":686,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":663,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":652,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":657,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":658,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":656,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["1.0.1",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["1.3.4",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["1.5.1",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["1.6.1",{"_index":690,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":618,"title":{},"body":{"injectables/UsersService.html":{}}}],["10.0.2",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":563,"title":{},"body":{"controllers/UsersController.html":{}}}],["12",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["17.8.3",{"_index":685,"title":{},"body":{"dependencies.html":{}}}],["1})@length(2",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["2.0.0",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["2.3.1",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["2023",{"_index":717,"title":{},"body":{"license.html":{}}}],["23505",{"_index":706,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["29.4.3",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["2fa",{"_index":364,"title":{},"body":{"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthController.html":{}}}],["3",{"_index":564,"title":{},"body":{"controllers/UsersController.html":{},"overview.html":{}}}],["3/4",{"_index":655,"title":{},"body":{"coverage.html":{}}}],["3mb",{"_index":505,"title":{},"body":{"controllers/UsersController.html":{}}}],["4",{"_index":791,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["401",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["404",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["41",{"_index":718,"title":{},"body":{"license.html":{}}}],["42",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["5.0.0",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["5.1.0",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["6.2.1",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":697,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":654,"title":{},"body":{"coverage.html":{}}}],["8.9.0",{"_index":692,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["9_",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["__dirname",{"_index":310,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["above",{"_index":752,"title":{},"body":{"license.html":{}}}],["access",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["accesscookie",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{}}}],["accesstoken",{"_index":539,"title":{},"body":{"controllers/UsersController.html":{}}}],["accesstokencookie",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["action",{"_index":777,"title":{},"body":{"license.html":{}}}],["age=${this.configservice.get",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["age=0",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["and/or",{"_index":743,"title":{},"body":{"license.html":{}}}],["api",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibearerauth",{"_index":28,"title":{},"body":{"controllers/AppController.html":{}}}],["apibearerauth('access",{"_index":41,"title":{},"body":{"controllers/AppController.html":{}}}],["apiconflictresponse",{"_index":533,"title":{},"body":{"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":535,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":521,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@matches([a",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apisecurity",{"_index":522,"title":{},"body":{"controllers/UsersController.html":{}}}],["apisecurity('42",{"_index":541,"title":{},"body":{"controllers/UsersController.html":{}}}],["apisecurity('jwt",{"_index":545,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('2fa",{"_index":416,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["apitags('auth",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":524,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_pipe",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":48,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":30,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arising",{"_index":781,"title":{},"body":{"license.html":{}}}],["array",{"_index":548,"title":{},"body":{"controllers/UsersController.html":{}}}],["array'})@useguards(jwttwofactorguard",{"_index":495,"title":{},"body":{"controllers/UsersController.html":{}}}],["arraybuffer",{"_index":625,"title":{},"body":{"injectables/UsersService.html":{}}}],["ascii",{"_index":393,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{}}}],["associated",{"_index":729,"title":{},"body":{"license.html":{}}}],["async",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.controller.ts",{"_index":399,"title":{},"body":{"controllers/TwoFactorAuthController.html":{},"coverage.html":{}}}],["auth.controller.ts:33",{"_index":405,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["auth.controller.ts:43",{"_index":414,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["auth.controller.ts:59",{"_index":412,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["auth.controller.ts:66",{"_index":409,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["auth.guard",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":334,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/FourtyTwoStrategy.html":{},"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{}}}],["auth.service.ts",{"_index":373,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{},"coverage.html":{}}}],["auth.service.ts:14",{"_index":440,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["auth.service.ts:17",{"_index":441,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["auth.service.ts:23",{"_index":443,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["auth.service.ts:27",{"_index":444,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["auth/auth.module",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/jwt",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["authcontroller",{"_index":101,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{}}}],["authentication/two",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"coverage.html":{},"interfaces/twoFactorToken.html":{}}}],["authentication=${token",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":315,"title":{},"body":{"injectables/FourtyTwoGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtTwoFactorGuard.html":{}}}],["authguard('fourty",{"_index":318,"title":{},"body":{"injectables/FourtyTwoGuard.html":{}}}],["authguard('jwt",{"_index":335,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtTwoFactorGuard.html":{}}}],["authmodule",{"_index":54,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":795,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["authors",{"_index":770,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":139,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FourtyTwoStrategy.html":{},"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":789,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":447,"title":{},"body":{"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["avatarurl",{"_index":630,"title":{},"body":{"injectables/UsersService.html":{}}}],["await",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["axios",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["axioserror",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":711,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":615,"title":{},"body":{"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":621,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(refreshtoken",{"_index":617,"title":{},"body":{"injectables/UsersService.html":{}}}],["bearer",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FourtyTwoStrategy.html":{},"dependencies.html":{}}}],["bmp",{"_index":508,"title":{},"body":{"controllers/UsersController.html":{}}}],["body",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{}}}],["body('token",{"_index":426,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["boolean",{"_index":398,"title":{},"body":{"interfaces/TokenPayload.html":{},"entities/User.html":{}}}],["bootstrap",{"_index":662,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":787,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":784,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":609,"title":{},"body":{"injectables/UsersService.html":{}}}],["byte",{"_index":494,"title":{},"body":{"controllers/UsersController.html":{}}}],["bytea",{"_index":454,"title":{},"body":{"entities/User.html":{}}}],["c",{"_index":716,"title":{},"body":{"license.html":{}}}],["catcherror",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["catcherror((error",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["change",{"_index":504,"title":{},"body":{"controllers/UsersController.html":{}}}],["charge",{"_index":724,"title":{},"body":{"license.html":{}}}],["claim",{"_index":773,"title":{},"body":{"license.html":{}}}],["class",{"_index":36,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/FourtyTwoGuard.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"overview.html":{}}}],["classes",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["classserializerinterceptor",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{}}}],["client_id",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["client_secret",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_appmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":569,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":570,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":571,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":473,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":462,"title":{},"body":{"entities/User.html":{}}}],["column({nullable",{"_index":457,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":453,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":464,"title":{},"body":{"entities/User.html":{}}}],["conditions",{"_index":751,"title":{},"body":{"license.html":{}}}],["configmodule",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule.forroot",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{}}}],["configservice.get('db_database",{"_index":308,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_host",{"_index":300,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_password",{"_index":306,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_port",{"_index":302,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_user_name",{"_index":304,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('jwt_access_token_secret",{"_index":360,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["configservice.get('jwt_refresh_token_secret",{"_index":349,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["conflictexception('invalid",{"_index":634,"title":{},"body":{"injectables/UsersService.html":{}}}],["connection",{"_index":782,"title":{},"body":{"license.html":{}}}],["console.log(accesscookie",{"_index":430,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["console.log(payload",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(user",{"_index":641,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":322,"title":{},"body":{"injectables/FourtyTwoStrategy.html":{}}}],["constructor(configservice",{"_index":338,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["constructor(jwtservice",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(private",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"injectables/FourtyTwoStrategy.html":{},"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{}}}],["constructor(userrepository",{"_index":585,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":439,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["content",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{}}}],["contract",{"_index":778,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('2fa",{"_index":417,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["controller('auth",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":525,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{},"dependencies.html":{}}}],["copies",{"_index":745,"title":{},"body":{"license.html":{}}}],["copy",{"_index":727,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":715,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":647,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createuserdto",{"_index":274,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.nickname",{"_index":633,"title":{},"body":{"injectables/UsersService.html":{}}}],["damages",{"_index":774,"title":{},"body":{"license.html":{}}}],["data",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":307,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":55,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["db",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["db_database",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["db_host",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["db_password",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["db_port",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["db_username",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["deal",{"_index":731,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":783,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"controllers/TwoFactorAuthController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["defined",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":488,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete()@apioperation({summary",{"_index":487,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteresult",{"_index":644,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser",{"_index":482,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(@req",{"_index":557,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(id",{"_index":587,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser(req",{"_index":486,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":50,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":530,"title":{},"body":{"controllers/UsersController.html":{},"properties.html":{}}}],["dev",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["disposition",{"_index":554,"title":{},"body":{"controllers/UsersController.html":{}}}],["distribute",{"_index":741,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":648,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["encoding",{"_index":392,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{}}}],["entities",{"_index":309,"title":{},"body":{"modules/DatabaseModule.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":445,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{}}}],["entity.{js,ts",{"_index":311,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["enum",{"_index":467,"title":{},"body":{"entities/User.html":{}}}],["enumerations",{"_index":700,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env/.env",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["env/.env.dev",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["event",{"_index":769,"title":{},"body":{"license.html":{}}}],["example",{"_index":538,"title":{},"body":{"controllers/UsersController.html":{}}}],["exclude",{"_index":471,"title":{},"body":{"entities/User.html":{}}}],["exists",{"_index":534,"title":{},"body":{"controllers/UsersController.html":{}}}],["expiresin",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/FourtyTwoGuard.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"interfaces/TokenPayload.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/twoFactorToken.html":{}}}],["exports",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":343,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/UsersController.html":{},"dependencies.html":{},"license.html":{}}}],["express.multer.file",{"_index":502,"title":{},"body":{"controllers/UsersController.html":{}}}],["extends",{"_index":317,"title":{},"body":{"injectables/FourtyTwoGuard.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["extractjwt",{"_index":344,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":346,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["factor",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"coverage.html":{},"interfaces/twoFactorToken.html":{}}}],["factor.guard",{"_index":415,"title":{},"body":{"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{}}}],["factor.guard.ts",{"_index":363,"title":{},"body":{"injectables/JwtTwoFactorGuard.html":{},"coverage.html":{}}}],["factor.strategy",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{}}}],["factor.strategy.ts",{"_index":365,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["factor.strategy.ts:13",{"_index":366,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["factor.strategy.ts:28",{"_index":367,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["fail",{"_index":395,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{}}}],["false",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/FourtyTwoGuard.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"interfaces/TokenPayload.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"interfaces/twoFactorToken.html":{}}}],["file.buffer",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{}}}],["fileinterceptor",{"_index":519,"title":{},"body":{"controllers/UsersController.html":{}}}],["files",{"_index":730,"title":{},"body":{"license.html":{}}}],["filetype",{"_index":565,"title":{},"body":{"controllers/UsersController.html":{}}}],["filetypevalidator",{"_index":513,"title":{},"body":{"controllers/UsersController.html":{}}}],["firstvaluefrom",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["fitness",{"_index":765,"title":{},"body":{"license.html":{}}}],["following",{"_index":750,"title":{},"body":{"license.html":{}}}],["found",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["fourty",{"_index":330,"title":{},"body":{"injectables/FourtyTwoStrategy.html":{}}}],["fourtytwoguard",{"_index":141,"title":{"injectables/FourtyTwoGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/FourtyTwoGuard.html":{},"coverage.html":{}}}],["fourtytwostrategy",{"_index":180,"title":{"injectables/FourtyTwoStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/FourtyTwoStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["free",{"_index":723,"title":{},"body":{"license.html":{}}}],["function",{"_index":661,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":707,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":748,"title":{},"body":{"license.html":{}}}],["generatetwofactorauthsecret",{"_index":436,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["generatetwofactorauthsecret(id",{"_index":379,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{}}}],["get('avatar",{"_index":547,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('avatar')@apioperation({summary",{"_index":492,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('generate",{"_index":418,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["get('generate')@useguards(jwtauthguard",{"_index":404,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["get('hello",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["get('hello')@useguards(jwtauthguard)@apibearerauth('access",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["get('https://api.intra.42.fr/v2/me",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('refresh",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('refresh')@useguards(jwtrefreshauthguard",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apisecurity('jwt",{"_index":498,"title":{},"body":{"controllers/UsersController.html":{}}}],["getavatarfromweb",{"_index":577,"title":{},"body":{"injectables/UsersService.html":{}}}],["getavatarfromweb(url",{"_index":589,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid",{"_index":578,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid(id",{"_index":592,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcookieforlogout",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcookiewithjwtaccesstoken",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcookiewithjwtaccesstoken(id",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcookiewithjwtrefreshtoken(id",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["getfourtytwouserinfo",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["getfourtytwouserinfo(token",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["getting",{"_index":709,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuseravatar",{"_index":483,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuseravatar(@req",{"_index":549,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuseravatar(id",{"_index":594,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuseravatar(req",{"_index":491,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserifrefreshtokenvalid",{"_index":579,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserifrefreshtokenvalid(refreshtoken",{"_index":596,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserinfo",{"_index":484,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserinfo(@req",{"_index":546,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserinfo(req",{"_index":497,"title":{},"body":{"controllers/UsersController.html":{}}}],["granted",{"_index":722,"title":{},"body":{"license.html":{}}}],["graph",{"_index":788,"title":{},"body":{"modules.html":{}}}],["guards/fourty",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/jwt",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{}}}],["hashedrefreshtoken",{"_index":448,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["headers",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["hello",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["hello(@request",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["hello(req",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["hereby",{"_index":721,"title":{},"body":{"license.html":{}}}],["holders",{"_index":771,"title":{},"body":{"license.html":{}}}],["host",{"_index":299,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["http",{"_index":329,"title":{},"body":{"injectables/FourtyTwoStrategy.html":{},"dependencies.html":{}}}],["httpcode",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{}}}],["httpcode(200",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{}}}],["httpmodule",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["httponly",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpservice",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["id",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/TokenPayload.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":493,"title":{},"body":{"controllers/UsersController.html":{}}}],["image/(jpg|jpeg|png|bmp",{"_index":566,"title":{},"body":{"controllers/UsersController.html":{}}}],["implied",{"_index":761,"title":{},"body":{"license.html":{}}}],["import",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/FourtyTwoGuard.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{}}}],["included",{"_index":755,"title":{},"body":{"license.html":{}}}],["including",{"_index":734,"title":{},"body":{"license.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"interfaces/TokenPayload.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"interfaces/twoFactorToken.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/FourtyTwoGuard.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"interfaces/TokenPayload.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/twoFactorToken.html":{}}}],["ingame",{"_index":476,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["inject",{"_index":296,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["injectable",{"_index":98,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FourtyTwoGuard.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/TwoFactorAuthService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FourtyTwoGuard.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":99,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FourtyTwoGuard.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/TwoFactorAuthService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(user",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inline",{"_index":555,"title":{},"body":{"controllers/UsersController.html":{}}}],["interface",{"_index":369,"title":{"interfaces/QRCodeUrl.html":{},"interfaces/TokenPayload.html":{},"interfaces/twoFactorToken.html":{}},"body":{"interfaces/QRCodeUrl.html":{},"interfaces/TokenPayload.html":{},"injectables/TwoFactorAuthService.html":{},"coverage.html":{},"interfaces/twoFactorToken.html":{}}}],["interfaces",{"_index":371,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"interfaces/TokenPayload.html":{},"overview.html":{},"interfaces/twoFactorToken.html":{}}}],["invalid",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["isexist",{"_index":631,"title":{},"body":{"injectables/UsersService.html":{}}}],["isglobal",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["isrefreshtokenmatch",{"_index":620,"title":{},"body":{"injectables/UsersService.html":{}}}],["istwofactorauthenticationcompleted",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/TokenPayload.html":{}}}],["istwofactorauthenticationenabled",{"_index":449,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["isverified",{"_index":389,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{}}}],["jest",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["joi",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["jpeg",{"_index":507,"title":{},"body":{"controllers/UsersController.html":{}}}],["jpg",{"_index":509,"title":{},"body":{"controllers/UsersController.html":{}}}],["jwt",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"dependencies.html":{}}}],["jwt_access_token_expiration_time",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["jwt_access_token_secret",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_refresh_token_expiration_time",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["jwt_refresh_token_secret",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtauthguard",{"_index":32,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":345,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["jwtmodule",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtrefreshauthguard",{"_index":145,"title":{"injectables/JwtRefreshAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshAuthGuard.html":{},"coverage.html":{}}}],["jwtrefreshstrategy",{"_index":181,"title":{"injectables/JwtRefreshStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtRefreshStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":182,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttwofactorguard",{"_index":362,"title":{"injectables/JwtTwoFactorGuard.html":{}},"body":{"injectables/JwtTwoFactorGuard.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwttwofactorstrategy",{"_index":183,"title":{"injectables/JwtTwoFactorStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kind",{"_index":760,"title":{},"body":{"license.html":{}}}],["length",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["length(2",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["liability",{"_index":775,"title":{},"body":{"license.html":{}}}],["liable",{"_index":772,"title":{},"body":{"license.html":{}}}],["license",{"_index":713,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["limit",{"_index":506,"title":{},"body":{"controllers/UsersController.html":{}}}],["limitation",{"_index":735,"title":{},"body":{"license.html":{}}}],["limited",{"_index":762,"title":{},"body":{"license.html":{}}}],["link",{"_index":543,"title":{},"body":{"controllers/UsersController.html":{}}}],["logger",{"_index":576,"title":{},"body":{"injectables/UsersService.html":{}}}],["logger('user",{"_index":611,"title":{},"body":{"injectables/UsersService.html":{}}}],["login",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@req",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@req",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(req",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["matches",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(.{0",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(`[a",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(`\\.{0",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/FourtyTwoGuard.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"interfaces/TokenPayload.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/twoFactorToken.html":{}}}],["max",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["maxfilesizevalidator",{"_index":514,"title":{},"body":{"controllers/UsersController.html":{}}}],["maxsize",{"_index":562,"title":{},"body":{"controllers/UsersController.html":{}}}],["merchantability",{"_index":764,"title":{},"body":{"license.html":{}}}],["merge",{"_index":739,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":695,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":699,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":714,"title":{},"body":{"license.html":{}}}],["mock",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["modify",{"_index":738,"title":{},"body":{"license.html":{}}}],["module",{"_index":47,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":49,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["name",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nestjs/axios",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/FourtyTwoGuard.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":316,"title":{},"body":{"injectables/FourtyTwoGuard.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":520,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["nickname",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["noninfringement",{"_index":768,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":613,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception('invalid",{"_index":627,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception(`user",{"_index":642,"title":{},"body":{"injectables/UsersService.html":{}}}],["notice",{"_index":753,"title":{},"body":{"license.html":{}}}],["null",{"_index":628,"title":{},"body":{"injectables/UsersService.html":{}}}],["nullable",{"_index":455,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/QRCodeUrl.html":{},"interfaces/TokenPayload.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["oauth2",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["obtaining",{"_index":726,"title":{},"body":{"license.html":{}}}],["off')@httpcode(200)@useguards(jwttwofactorguard",{"_index":408,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["offline",{"_index":475,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["ok",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["on')@httpcode(200)@useguards(jwtauthguard",{"_index":411,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["online",{"_index":474,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["optional",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/TokenPayload.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["otherwise",{"_index":780,"title":{},"body":{"license.html":{}}}],["otpurl",{"_index":420,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["out",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":790,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":666,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parsefilepipe",{"_index":515,"title":{},"body":{"controllers/UsersController.html":{}}}],["parser",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["particular",{"_index":766,"title":{},"body":{"license.html":{}}}],["passport",{"_index":328,"title":{},"body":{"injectables/FourtyTwoStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":326,"title":{},"body":{"injectables/FourtyTwoStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["passportstrategy(strategy",{"_index":358,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passreqtocallback",{"_index":350,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["passthrough",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{}}}],["password",{"_index":305,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["path",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.id",{"_index":353,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["payload.interface",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.interface.ts",{"_index":397,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["payload.istwofactorauthenticationcompleted",{"_index":368,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["permission",{"_index":720,"title":{},"body":{"license.html":{}}}],["permit",{"_index":746,"title":{},"body":{"license.html":{}}}],["person",{"_index":725,"title":{},"body":{"license.html":{}}}],["persons",{"_index":747,"title":{},"body":{"license.html":{}}}],["pg",{"_index":691,"title":{},"body":{"dependencies.html":{}}}],["pipe",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["pipeqrcodestream",{"_index":437,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["pipeqrcodestream(@res",{"_index":384,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{}}}],["pipeqrcodestream(response",{"_index":442,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["png",{"_index":510,"title":{},"body":{"controllers/UsersController.html":{}}}],["pong",{"_index":531,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["port",{"_index":301,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["portions",{"_index":757,"title":{},"body":{"license.html":{}}}],["post",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{}}}],["post('login",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@useguards(fourtytwoguard)@httpcode(200",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@useguards(jwtauthguard)@httpcode(200",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":526,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('turn",{"_index":407,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["post('validate",{"_index":424,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["post('validate')@httpcode(200)@useguards(jwtauthguard",{"_index":413,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["postgres",{"_index":298,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgreserrorcode",{"_index":701,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{}}}],["primarycolumn",{"_index":460,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["project",{"_index":712,"title":{},"body":{"index.html":{}}}],["promise",{"_index":591,"title":{},"body":{"injectables/UsersService.html":{}}}],["properties",{"_index":277,"title":{"properties.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/QRCodeUrl.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"properties.html":{},"interfaces/twoFactorToken.html":{}}}],["provide",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":758,"title":{},"body":{"license.html":{}}}],["providers",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["publish",{"_index":740,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":767,"title":{},"body":{"license.html":{}}}],["put",{"_index":516,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('avatar",{"_index":559,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('avatar')@apioperation({summary",{"_index":503,"title":{},"body":{"controllers/UsersController.html":{}}}],["qrcode",{"_index":374,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{},"dependencies.html":{}}}],["qrcode.tofilestream(response",{"_index":387,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{}}}],["qrcodeurl",{"_index":370,"title":{"interfaces/QRCodeUrl.html":{}},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{},"coverage.html":{}}}],["readonly",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reflect",{"_index":694,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"coverage.html":{}}}],["refresh(@req",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(req",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh.strategy",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{}}}],["refresh.strategy.ts",{"_index":337,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"coverage.html":{}}}],["refresh.strategy.ts:13",{"_index":340,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["refresh.strategy.ts:29",{"_index":342,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["refresh=${refreshtoken",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshcookie",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshtoken",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["register",{"_index":400,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["register(@req",{"_index":419,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["register(req",{"_index":403,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["removerefreshtoken",{"_index":580,"title":{},"body":{"injectables/UsersService.html":{}}}],["removerefreshtoken(id",{"_index":598,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{}}}],["req.cookies?.refresh",{"_index":351,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["req.res.setheader('set",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{}}}],["req.user",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["req.user.id",{"_index":422,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["request",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["request?.cookies?.authentication",{"_index":359,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["request?.cookies?.refresh",{"_index":347,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["required",{"_index":532,"title":{},"body":{"controllers/UsersController.html":{}}}],["res",{"_index":375,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{}}}],["res.set",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["reset",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":385,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{}}}],["responsetype",{"_index":624,"title":{},"body":{"injectables/UsersService.html":{}}}],["restriction",{"_index":733,"title":{},"body":{"license.html":{}}}],["results",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/FourtyTwoGuard.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"interfaces/TokenPayload.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/twoFactorToken.html":{}}}],["return",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rights",{"_index":736,"title":{},"body":{"license.html":{}}}],["rxjs",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["schema",{"_index":537,"title":{},"body":{"controllers/UsersController.html":{}}}],["secret",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{},"injectables/UsersService.html":{}}}],["secret.ascii",{"_index":382,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{}}}],["secret.otpauth_url",{"_index":383,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{}}}],["secretorkey",{"_index":348,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["sell",{"_index":744,"title":{},"body":{"license.html":{}}}],["serivce",{"_index":612,"title":{},"body":{"injectables/UsersService.html":{}}}],["setcurrentrefreshtoken",{"_index":581,"title":{},"body":{"injectables/UsersService.html":{}}}],["setcurrentrefreshtoken(refreshtoken",{"_index":600,"title":{},"body":{"injectables/UsersService.html":{}}}],["settwofactorauthenticationsecret",{"_index":582,"title":{},"body":{"injectables/UsersService.html":{}}}],["settwofactorauthenticationsecret(id",{"_index":602,"title":{},"body":{"injectables/UsersService.html":{}}}],["shall",{"_index":754,"title":{},"body":{"license.html":{}}}],["sign",{"_index":528,"title":{},"body":{"controllers/UsersController.html":{}}}],["signup",{"_index":629,"title":{},"body":{"injectables/UsersService.html":{}}}],["signup(@body",{"_index":542,"title":{},"body":{"controllers/UsersController.html":{}}}],["software",{"_index":728,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/FourtyTwoGuard.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"interfaces/TokenPayload.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/twoFactorToken.html":{}}}],["speakeasy",{"_index":376,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{},"dependencies.html":{}}}],["speakeasy.generatesecret",{"_index":380,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{}}}],["speakeasy.totp.verify",{"_index":390,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{}}}],["src/.../main.ts",{"_index":708,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../postgreserrorcodes.enum.ts",{"_index":702,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../users.entity.ts",{"_index":703,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:13",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":100,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:36",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:61",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:76",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:14",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:23",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:38",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:53",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:60",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/guards/fourty",{"_index":313,"title":{},"body":{"injectables/FourtyTwoGuard.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":333,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/strategies/fourty",{"_index":319,"title":{},"body":{"injectables/FourtyTwoStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt",{"_index":336,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":354,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:10",{"_index":355,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:26",{"_index":357,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/token",{"_index":396,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/auth/two",{"_index":372,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"coverage.html":{},"interfaces/twoFactorToken.html":{}}}],["src/database/database.module.ts",{"_index":294,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/postgreserrorcodes.enum.ts",{"_index":704,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/main.ts",{"_index":660,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/dto/users.dto.ts",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/users.dto.ts:9",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/users.controller.ts",{"_index":480,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:49",{"_index":500,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:56",{"_index":496,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:70",{"_index":490,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:80",{"_index":512,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.entity",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.entity.ts",{"_index":446,"title":{},"body":{"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/users.entity.ts:13",{"_index":461,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:16",{"_index":465,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:22",{"_index":456,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:29",{"_index":469,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:33",{"_index":459,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:36",{"_index":470,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:39",{"_index":463,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.module",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":572,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{}}}],["src/users/users.service.ts",{"_index":575,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:106",{"_index":595,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:111",{"_index":588,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:118",{"_index":610,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:12",{"_index":586,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:19",{"_index":603,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:26",{"_index":601,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:31",{"_index":597,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":590,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:54",{"_index":599,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:84",{"_index":607,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:91",{"_index":605,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:98",{"_index":593,"title":{},"body":{"injectables/UsersService.html":{}}}],["started",{"_index":710,"title":{"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":450,"title":{},"body":{"entities/User.html":{}}}],["strategies/fourty",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/jwt",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/jwt.strategy",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":327,"title":{},"body":{"injectables/FourtyTwoStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["streamablefile",{"_index":517,"title":{},"body":{"controllers/UsersController.html":{}}}],["streamablefile(avatar",{"_index":556,"title":{},"body":{"controllers/UsersController.html":{}}}],["string",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/FourtyTwoStrategy.html":{},"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"interfaces/twoFactorToken.html":{}}}],["subject",{"_index":749,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":742,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":756,"title":{},"body":{"license.html":{}}}],["success",{"_index":536,"title":{},"body":{"controllers/UsersController.html":{}}}],["summary",{"_index":527,"title":{},"body":{"controllers/UsersController.html":{}}}],["super",{"_index":331,"title":{},"body":{"injectables/FourtyTwoStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["support",{"_index":785,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":786,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":312,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["table",{"_index":665,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":664,"title":{},"body":{"coverage.html":{}}}],["this.authservice.getcookieforlogout",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getcookiewithjwtaccesstoken",{"_index":429,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["this.authservice.getcookiewithjwtaccesstoken(id",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getcookiewithjwtrefreshtoken(id",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getfourtytwouserinfo(token",{"_index":332,"title":{},"body":{"injectables/FourtyTwoStrategy.html":{}}}],["this.authservice.gettokens(id",{"_index":637,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.configservice.get('jwt_access_token_expiration_time",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_access_token_secret",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_token_expiration_time",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_token_secret",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getavatarfromweb(avatarurl",{"_index":635,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getbyid(id",{"_index":619,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.httpservice",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.httpservice.get(url",{"_index":623,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign(payload",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error(error",{"_index":626,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.twofactorauthservice.generatetwofactorauthsecret",{"_index":421,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["this.twofactorauthservice.pipeqrcodestream(res",{"_index":423,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["this.twofactorauthservice.verifytwofactorauth",{"_index":427,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["this.userrepository.create",{"_index":638,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.delete",{"_index":645,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneby",{"_index":632,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":640,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.update",{"_index":616,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.deleteuser(req.user.id",{"_index":558,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.getbyid(payload.id",{"_index":361,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["this.userservice.getuseravatar(req.user.id",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.getuserifrefreshtokenvalid",{"_index":352,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["this.userservice.signup(createuserdto",{"_index":544,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.updateuseravatar(req.user.id",{"_index":567,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyid(id",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{}}}],["this.usersservice.removerefreshtoken(id",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.setcurrentrefreshtoken(refreshtoken",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.settwofactorauthenticationsecret(id",{"_index":381,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{}}}],["this.usersservice.turnofftwofactorauthentication(req.user.id",{"_index":435,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["this.usersservice.turnontwofactorauthentication(req.user.id",{"_index":432,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["throw",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"interfaces/twoFactorToken.html":{}}}],["token')@useguards(jwttwofactorguard",{"_index":499,"title":{},"body":{"controllers/UsersController.html":{}}}],["token.interface",{"_index":378,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{}}}],["token.interface.ts",{"_index":659,"title":{},"body":{"coverage.html":{},"interfaces/twoFactorToken.html":{}}}],["tokenpayload",{"_index":243,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["tokens",{"_index":636,"title":{},"body":{"injectables/UsersService.html":{}}}],["tokens.refreshtoken",{"_index":639,"title":{},"body":{"injectables/UsersService.html":{}}}],["tort",{"_index":779,"title":{},"body":{"license.html":{}}}],["transcendence",{"_index":719,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":472,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/TwoFactorAuthController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["true})@exclude",{"_index":458,"title":{},"body":{"entities/User.html":{}}}],["turnoff",{"_index":401,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["turnoff(@req",{"_index":434,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["turnoff(req",{"_index":406,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["turnofftwofactorauthentication",{"_index":583,"title":{},"body":{"injectables/UsersService.html":{}}}],["turnofftwofactorauthentication(id",{"_index":604,"title":{},"body":{"injectables/UsersService.html":{}}}],["turnon",{"_index":402,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["turnon(@req",{"_index":431,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["turnon(req",{"_index":410,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["turnontwofactorauthentication",{"_index":584,"title":{},"body":{"injectables/UsersService.html":{}}}],["turnontwofactorauthentication(id",{"_index":606,"title":{},"body":{"injectables/UsersService.html":{}}}],["two",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{},"injectables/FourtyTwoGuard.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["two.guard",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["two.guard.ts",{"_index":314,"title":{},"body":{"injectables/FourtyTwoGuard.html":{},"coverage.html":{}}}],["two.strategy",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{}}}],["two.strategy.ts",{"_index":320,"title":{},"body":{"injectables/FourtyTwoStrategy.html":{},"coverage.html":{}}}],["two.strategy.ts:10",{"_index":323,"title":{},"body":{"injectables/FourtyTwoStrategy.html":{}}}],["two.strategy.ts:15",{"_index":325,"title":{},"body":{"injectables/FourtyTwoStrategy.html":{}}}],["twofactorauthcontroller",{"_index":186,"title":{"controllers/TwoFactorAuthController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/TwoFactorAuthController.html":{},"coverage.html":{}}}],["twofactorauthservice",{"_index":184,"title":{"injectables/TwoFactorAuthService.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"coverage.html":{},"overview.html":{}}}],["twofactorsecret",{"_index":451,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["twofactortoken",{"_index":377,"title":{"interfaces/twoFactorToken.html":{}},"body":{"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"coverage.html":{},"interfaces/twoFactorToken.html":{}}}],["twofactortoken.token",{"_index":428,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["type",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"interfaces/TokenPayload.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"interfaces/twoFactorToken.html":{}}}],["typeorm",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":295,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types/bcrypt",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["uint8array",{"_index":452,"title":{},"body":{"entities/User.html":{}}}],["unauthorized",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('two",{"_index":394,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{}}}],["undefined",{"_index":468,"title":{},"body":{"entities/User.html":{}}}],["unique",{"_index":477,"title":{},"body":{"entities/User.html":{}}}],["uniqueviolation",{"_index":705,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unknown",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FourtyTwoStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":794,"title":{},"body":{"properties.html":{}}}],["up",{"_index":529,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateresult",{"_index":614,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateresult.affected",{"_index":646,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuseravatar",{"_index":485,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuseravatar(id",{"_index":608,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuseravatar(req",{"_index":501,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadedfile",{"_index":518,"title":{},"body":{"controllers/UsersController.html":{}}}],["url",{"_index":386,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{},"injectables/UsersService.html":{}}}],["use",{"_index":737,"title":{},"body":{"license.html":{}}}],["useclass",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":297,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["useguards",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(fourtytwoguard",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtrefreshauthguard",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwttwofactorguard",{"_index":433,"title":{},"body":{"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(undefined)@useguards(jwtauthguard",{"_index":511,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":157,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user'})@useguards(jwttwofactorguard",{"_index":489,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.avatar",{"_index":643,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.hashedrefreshtoken",{"_index":622,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.istwofactorauthenticationenabled",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["user.twofactorsecret",{"_index":391,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{}}}],["username",{"_index":303,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["userrepository",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["users",{"_index":481,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":573,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.entity",{"_index":574,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":523,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.entity",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":479,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":339,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/UsersController.html":{}}}],["usersmodule",{"_index":56,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":137,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/QRCodeUrl.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userstatus",{"_index":466,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userstatus.offline",{"_index":478,"title":{},"body":{"entities/User.html":{}}}],["validate",{"_index":321,"title":{},"body":{"injectables/FourtyTwoStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthController.html":{}}}],["validate(@req",{"_index":425,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["validate(payload",{"_index":356,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["validate(req",{"_index":341,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"controllers/TwoFactorAuthController.html":{}}}],["validate(token",{"_index":324,"title":{},"body":{"injectables/FourtyTwoStrategy.html":{}}}],["validationpipe",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["validationschema",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["validators",{"_index":561,"title":{},"body":{"controllers/UsersController.html":{}}}],["value",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["verifytwofactorauth",{"_index":438,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["verifytwofactorauth(id",{"_index":388,"title":{},"body":{"interfaces/QRCodeUrl.html":{},"injectables/TwoFactorAuthService.html":{}}}],["version",{"_index":792,"title":{},"body":{"properties.html":{}}}],["void",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["warranties",{"_index":763,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":759,"title":{},"body":{"license.html":{}}}],["whether",{"_index":776,"title":{},"body":{"license.html":{}}}],["without",{"_index":732,"title":{},"body":{"license.html":{}}}],["xxx",{"_index":540,"title":{},"body":{"controllers/UsersController.html":{}}}],["z0",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                hello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hello\n                        \n                    \n                \n            \n            \n                \n                    \n                    hello(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('hello')@UseGuards(JwtAuthGuard)@ApiBearerAuth('access-token')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth } from '@nestjs/swagger';\nimport { AppService } from './app.service';\nimport { JwtAuthGuard } from './auth/guards/jwt-auth.guard';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get('hello')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth('access-token')\n  async hello(@Request() req) {\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, ValidationPipe } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { APP_PIPE } from '@nestjs/core';\nimport * as Joi from 'joi';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { DatabaseModule } from './database/database.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      validationSchema: Joi.object({\n        DB_HOST: Joi.string().required(),\n        DB_PORT: Joi.number(),\n        DB_USERNAME: Joi.string().required(),\n        DB_PASSWORD: Joi.string().required(),\n        DB_DATABASE: Joi.string().required(),\n        CLIENT_ID: Joi.string().required(),\n        CLIENT_SECRET: Joi.string().required(),\n        JWT_ACCESS_TOKEN_SECRET: Joi.string().required(),\n        JWT_ACCESS_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        JWT_REFRESH_TOKEN_SECRET: Joi.string().required(),\n        JWT_REFRESH_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n      }),\n      envFilePath:\n        process.env.NODE_ENV == 'dev' ? '../env/.env.dev' : '../env/.env',\n    }),\n    DatabaseModule,\n    AuthModule,\n    UsersModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_PIPE,\n      useClass: ValidationPipe,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                refresh\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@UseGuards(FourtyTwoGuard)@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:36\n                \n            \n\n\n            \n                \n                    42 API token이 잘못된 경우 -> 401 UnAuthorized\n성공 -> 200 OK\n회원가입 -> 404 NOT FOUND\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@UseGuards(JwtAuthGuard)@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:76\n                \n            \n\n\n            \n                \n                    DB에 저장된 refresh token 삭제\ncookie 삭제\n200 OK -> 성공\n401 -> Jwt Token 만료\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh\n                        \n                    \n                \n            \n            \n                \nrefresh(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('refresh')@UseGuards(JwtRefreshAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:61\n                \n            \n\n\n            \n                \n                    200 OK -> 새로운 access token cookie 저장\n401 -> refresh token invalid\n이걸 언제쓰냐? 그냥 하다가 갑자기 401이 뜨는 경우 -> refresh\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Get,\n  HttpCode,\n  Post,\n  Req,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { UsersService } from 'src/users/users.service';\nimport { AuthService } from './auth.service';\nimport { FourtyTwoGuard } from './guards/fourty-two.guard';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { JwtRefreshAuthGuard } from './guards/jwt-refresh-auth.guard';\n\n@ApiTags('auth')\n@Controller('auth')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * 42 API token이 잘못된 경우 -> 401 UnAuthorized\n   * 성공 -> 200 OK\n   * 회원가입 -> 404 NOT FOUND\n   */\n  @Post('login')\n  @UseGuards(FourtyTwoGuard)\n  @HttpCode(200)\n  async login(@Req() req) {\n    const { id } = req.user;\n\n    const user = await this.usersService.getById(id);\n\n    const accessCookie = this.authService.getCookieWithJwtAccessToken(id);\n    const { refreshToken, refreshCookie } =\n      this.authService.getCookieWithJwtRefreshToken(id);\n\n    this.usersService.setCurrentRefreshToken(refreshToken, id);\n    req.res.setHeader('Set-Cookie', [accessCookie, refreshCookie]);\n\n    if (!user.isTwoFactorAuthenticationEnabled) {\n      return user;\n    }\n    return;\n  }\n\n  /**\n   * 200 OK -> 새로운 access token cookie 저장\n   * 401 -> refresh token invalid\n   * 이걸 언제쓰냐? 그냥 하다가 갑자기 401이 뜨는 경우 -> refresh\n   */\n  @Get('refresh')\n  @UseGuards(JwtRefreshAuthGuard)\n  refresh(@Req() req) {\n    const { id } = req.user;\n    const accessTokenCookie = this.authService.getCookieWithJwtAccessToken(id);\n    req.res.setHeader('Set-Cookie', accessTokenCookie);\n  }\n\n  /**\n   * DB에 저장된 refresh token 삭제\n   * cookie 삭제\n   * 200 OK -> 성공\n   * 401 -> Jwt Token 만료\n   */\n  @Post('logout')\n  @UseGuards(JwtAuthGuard)\n  @HttpCode(200)\n  async logOut(@Req() req) {\n    const { id } = req.user;\n    await this.usersService.removeRefreshToken(id);\n    const cookie = await this.authService.getCookieForLogOut();\n    req.res.setHeader('Set-Cookie', cookie);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nFourtyTwoStrategy\n\nFourtyTwoStrategy\n\nAuthModule -->\n\nFourtyTwoStrategy->AuthModule\n\n\n\n\n\nJwtRefreshStrategy\n\nJwtRefreshStrategy\n\nAuthModule -->\n\nJwtRefreshStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthModule -->\n\nJwtTwoFactorStrategy->AuthModule\n\n\n\n\n\nTwoFactorAuthService\n\nTwoFactorAuthService\n\nAuthModule -->\n\nTwoFactorAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            FourtyTwoStrategy\n                        \n                        \n                            JwtRefreshStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            JwtTwoFactorStrategy\n                        \n                        \n                            TwoFactorAuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            TwoFactorAuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FourtyTwoStrategy } from './strategies/fourty-two.strategy';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { JwtRefreshStrategy } from './strategies/jwt-refresh.strategy';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from 'src/users/users.entity';\nimport { HttpModule } from '@nestjs/axios';\nimport { UsersModule } from 'src/users/users.module';\nimport { TwoFactorAuthController } from './two-factor-authentication/two-factor-auth.controller';\nimport { TwoFactorAuthService } from './two-factor-authentication/two-factor-auth.service';\nimport { JwtTwoFactorStrategy } from './strategies/jwt-two-factor.strategy';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    JwtModule.register({}),\n    HttpModule,\n    UsersModule,\n  ],\n  controllers: [AuthController, TwoFactorAuthController],\n  providers: [\n    FourtyTwoStrategy,\n    JwtStrategy,\n    JwtRefreshStrategy,\n    JwtTwoFactorStrategy,\n    AuthService,\n    TwoFactorAuthService,\n  ],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCookieForLogOut\n                            \n                            \n                                getCookieWithJwtAccessToken\n                            \n                            \n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                    Async\n                                getFourtyTwoUserInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, userRepository: Repository, httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCookieForLogOut\n                        \n                    \n                \n            \n            \n                \ngetCookieForLogOut()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCookieWithJwtAccessToken\n                        \n                    \n                \n            \n            \n                \ngetCookieWithJwtAccessToken(id: number, isTwoFactorAuthenticationCompleted)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isTwoFactorAuthenticationCompleted\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \ngetCookieWithJwtRefreshToken(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { refreshCookie: string; refreshToken: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFourtyTwoUserInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFourtyTwoUserInfo(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../users/users.entity';\nimport { Repository } from 'typeorm';\n\nimport { catchError, firstValueFrom } from 'rxjs';\nimport { AxiosError } from 'axios';\nimport { HttpService } from '@nestjs/axios';\nimport { TokenPayload } from './token-payload.interface';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    private readonly httpService: HttpService,\n  ) {}\n\n  getCookieWithJwtAccessToken(\n    id: number,\n    isTwoFactorAuthenticationCompleted = false,\n  ) {\n    const payload: TokenPayload = { id, isTwoFactorAuthenticationCompleted };\n    console.log(payload);\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET'),\n      expiresIn: this.configService.get('JWT_ACCESS_TOKEN_EXPIRATION_TIME'),\n    });\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_ACCESS_TOKEN_EXPIRATION_TIME',\n    )}`;\n  }\n\n  getCookieWithJwtRefreshToken(id: number) {\n    const payload: TokenPayload = { id };\n    const refreshToken = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      expiresIn: this.configService.get('JWT_REFRESH_TOKEN_EXPIRATION_TIME'),\n    });\n    const refreshCookie = `Refresh=${refreshToken}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_REFRESH_TOKEN_EXPIRATION_TIME',\n    )}`;\n    return {\n      refreshCookie,\n      refreshToken,\n    };\n  }\n\n  getCookieForLogOut() {\n    return [\n      `Authentication=; HttpOnly; Path=/; Max-Age=0`,\n      'Refresh=; HttpOnly; Path=/; Max-Age=0',\n    ];\n  }\n\n  async getFourtyTwoUserInfo(token: string) {\n    const { data } = await firstValueFrom(\n      this.httpService\n        .get('https://api.intra.42.fr/v2/me', {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .pipe(\n          catchError((error: AxiosError) => {\n            throw new UnauthorizedException('invalid 42 token');\n          }),\n        ),\n    );\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                nickname\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Matches([a-z0-9_.'-]+)@Matches(.{0, 1})@Length(2, 12)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/users.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Length, Matches } from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty()\n  @Matches(`[a-z0-9_\\.'\\-]+`)\n  @Matches(`\\.{0, 1}`)\n  @Length(2, 12)\n  nickname: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USER_NAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_DATABASE'),\n        entities: [__dirname + '/../**/*.entity.{js,ts}'],\n        synchronize: true,\n      }),\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FourtyTwoGuard.html":{"url":"injectables/FourtyTwoGuard.html","title":"injectable - FourtyTwoGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FourtyTwoGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/fourty-two.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class FourtyTwoGuard extends AuthGuard('fourty-two') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FourtyTwoStrategy.html":{"url":"injectables/FourtyTwoStrategy.html","title":"injectable - FourtyTwoStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FourtyTwoStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/fourty-two.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/fourty-two.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/fourty-two.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-http-bearer';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class FourtyTwoStrategy extends PassportStrategy(\n  Strategy,\n  'fourty-two',\n) {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  async validate(token: string) {\n    return this.authService.getFourtyTwoUserInfo(token);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshAuthGuard.html":{"url":"injectables/JwtRefreshAuthGuard.html","title":"injectable - JwtRefreshAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-refresh-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtRefreshAuthGuard extends AuthGuard('jwt-refresh') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshStrategy.html":{"url":"injectables/JwtRefreshStrategy.html","title":"injectable - JwtRefreshStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt-refresh.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt-refresh.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: Request, payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt-refresh.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UsersService } from 'src/users/users.service';\nimport { TokenPayload } from '../token-payload.interface';\n\n@Injectable()\nexport class JwtRefreshStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(\n    private configService: ConfigService,\n    private userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Refresh;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(req: Request, payload: TokenPayload) {\n    const refreshToken = req.cookies?.Refresh;\n    return this.userService.getUserIfRefreshTokenValid(\n      refreshToken,\n      payload.id,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UsersService } from 'src/users/users.service';\nimport { TokenPayload } from '../token-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    const user = await this.userService.getById(payload.id);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorGuard.html":{"url":"injectables/JwtTwoFactorGuard.html","title":"injectable - JwtTwoFactorGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-two-factor.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtTwoFactorGuard extends AuthGuard('jwt-2fa') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorStrategy.html":{"url":"injectables/JwtTwoFactorStrategy.html","title":"injectable - JwtTwoFactorStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt-two-factor.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt-two-factor.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt-two-factor.strategy.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Req } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UsersService } from 'src/users/users.service';\nimport { TokenPayload } from '../token-payload.interface';\n\n@Injectable()\nexport class JwtTwoFactorStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-2fa',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET'),\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    const user = await this.userService.getById(payload.id);\n    if (!user.isTwoFactorAuthenticationEnabled) {\n      return user;\n    }\n    if (payload.isTwoFactorAuthenticationCompleted) {\n      return user;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QRCodeUrl.html":{"url":"interfaces/QRCodeUrl.html","title":"interface - QRCodeUrl","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QRCodeUrl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/two-factor-authentication/two-factor-auth.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            qrcode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        qrcode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        qrcode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Res, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { UsersService } from 'src/users/users.service';\nimport * as speakeasy from 'speakeasy';\nimport * as QRCode from 'qrcode';\nimport { AuthService } from '../auth.service';\nimport { twoFactorToken } from './two-factor-token.interface';\n\nexport interface QRCodeUrl {\n  qrcode: string;\n}\n\n@Injectable()\nexport class TwoFactorAuthService {\n  constructor(private readonly usersService: UsersService) {}\n\n  async generateTwoFactorAuthSecret(id: number) {\n    const secret = speakeasy.generateSecret();\n    await this.usersService.setTwoFactorAuthenticationSecret(id, secret.ascii);\n    return secret.otpauth_url;\n  }\n\n  async pipeQRCodeStream(@Res() response, url: string) {\n    return QRCode.toFileStream(response, url);\n  }\n\n  async verifyTwoFactorAuth(id: number, token: string) {\n    const user = await this.usersService.getById(id);\n\n    const isVerified = speakeasy.totp.verify({\n      secret: user.twoFactorSecret,\n      encoding: 'ascii',\n      token,\n    });\n\n    if (!isVerified) {\n      throw new UnauthorizedException('two factor authentication fail');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isTwoFactorAuthenticationCompleted\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isTwoFactorAuthenticationCompleted\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isTwoFactorAuthenticationCompleted:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayload {\n  id: number;\n  isTwoFactorAuthenticationCompleted?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TwoFactorAuthController.html":{"url":"controllers/TwoFactorAuthController.html","title":"controller - TwoFactorAuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TwoFactorAuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/two-factor-authentication/two-factor-auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                2fa\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                turnOff\n                            \n                            \n                                    Async\n                                turnOn\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('generate')@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/two-factor-authentication/two-factor-auth.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOff\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOff(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('turn-off')@HttpCode(200)@UseGuards(JwtTwoFactorGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/two-factor-authentication/two-factor-auth.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOn\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOn(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('turn-on')@HttpCode(200)@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/two-factor-authentication/two-factor-auth.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req, twoFactorToken: twoFactorToken)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('validate')@HttpCode(200)@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/two-factor-authentication/two-factor-auth.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    twoFactorToken\n                                    \n                                                twoFactorToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Get,\n  HttpCode,\n  Post,\n  Req,\n  Res,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { UsersService } from 'src/users/users.service';\nimport { AuthService } from '../auth.service';\nimport { JwtAuthGuard } from '../guards/jwt-auth.guard';\nimport { JwtTwoFactorGuard } from '../guards/jwt-two-factor.guard';\nimport { TwoFactorAuthService } from './two-factor-auth.service';\nimport { twoFactorToken } from './two-factor-token.interface';\n\n@ApiTags('2fa')\n@Controller('2fa')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class TwoFactorAuthController {\n  constructor(\n    private readonly twoFactorAuthService: TwoFactorAuthService,\n    private readonly authService: AuthService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  @Get('generate')\n  @UseGuards(JwtAuthGuard)\n  async register(@Req() req, @Res() res) {\n    const otpUrl = await this.twoFactorAuthService.generateTwoFactorAuthSecret(\n      req.user.id,\n    );\n    return this.twoFactorAuthService.pipeQRCodeStream(res, otpUrl);\n  }\n\n  @Post('validate')\n  @HttpCode(200)\n  @UseGuards(JwtAuthGuard)\n  async validate(@Req() req, @Body('token') twoFactorToken: twoFactorToken) {\n    await this.twoFactorAuthService.verifyTwoFactorAuth(\n      req.user.id,\n      twoFactorToken.token,\n    );\n    const accessCookie = this.authService.getCookieWithJwtAccessToken(\n      req.user.id,\n      true,\n    );\n    console.log(accessCookie);\n    req.res.setHeader('Set-Cookie', [accessCookie]);\n  }\n\n  @Post('turn-on')\n  @HttpCode(200)\n  @UseGuards(JwtAuthGuard)\n  async turnOn(@Req() req) {\n    await this.usersService.turnOnTwoFactorAuthentication(req.user.id);\n  }\n\n  @Post('turn-off')\n  @HttpCode(200)\n  @UseGuards(JwtTwoFactorGuard)\n  async turnOff(@Req() req) {\n    await this.usersService.turnOffTwoFactorAuthentication(req.user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TwoFactorAuthService.html":{"url":"injectables/TwoFactorAuthService.html","title":"injectable - TwoFactorAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TwoFactorAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/two-factor-authentication/two-factor-auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateTwoFactorAuthSecret\n                            \n                            \n                                    Async\n                                pipeQRCodeStream\n                            \n                            \n                                    Async\n                                verifyTwoFactorAuth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/two-factor-authentication/two-factor-auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateTwoFactorAuthSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTwoFactorAuthSecret(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/two-factor-authentication/two-factor-auth.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pipeQRCodeStream\n                        \n                    \n                \n            \n            \n                \n                    \n                    pipeQRCodeStream(response, url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/two-factor-authentication/two-factor-auth.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyTwoFactorAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyTwoFactorAuth(id: number, token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/two-factor-authentication/two-factor-auth.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Res, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { UsersService } from 'src/users/users.service';\nimport * as speakeasy from 'speakeasy';\nimport * as QRCode from 'qrcode';\nimport { AuthService } from '../auth.service';\nimport { twoFactorToken } from './two-factor-token.interface';\n\nexport interface QRCodeUrl {\n  qrcode: string;\n}\n\n@Injectable()\nexport class TwoFactorAuthService {\n  constructor(private readonly usersService: UsersService) {}\n\n  async generateTwoFactorAuthSecret(id: number) {\n    const secret = speakeasy.generateSecret();\n    await this.usersService.setTwoFactorAuthenticationSecret(id, secret.ascii);\n    return secret.otpauth_url;\n  }\n\n  async pipeQRCodeStream(@Res() response, url: string) {\n    return QRCode.toFileStream(response, url);\n  }\n\n  async verifyTwoFactorAuth(id: number, token: string) {\n    const user = await this.usersService.getById(id);\n\n    const isVerified = speakeasy.totp.verify({\n      secret: user.twoFactorSecret,\n      encoding: 'ascii',\n      token,\n    });\n\n    if (!isVerified) {\n      throw new UnauthorizedException('two factor authentication fail');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                    Optional\n                                hashedRefreshToken\n                            \n                            \n                                id\n                            \n                            \n                                isTwoFactorAuthenticationEnabled\n                            \n                            \n                                nickname\n                            \n                            \n                                status\n                            \n                            \n                                    Optional\n                                twoFactorSecret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Uint8Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'bytea', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        hashedRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTwoFactorAuthenticationEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        twoFactorSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Column, Entity, PrimaryColumn } from 'typeorm';\n\nexport enum UserStatus {\n  ONLINE = 'ONLINE',\n  OFFLINE = 'OFFLINE',\n  INGAME = 'INGAME',\n}\n\n@Entity()\nexport class User {\n  @PrimaryColumn()\n  id: number;\n\n  @Column({ unique: true })\n  nickname: string;\n\n  @Column({\n    type: 'bytea',\n    nullable: false,\n  })\n  avatar: Uint8Array;\n\n  @Column({\n    type: 'enum',\n    enum: UserStatus,\n    default: UserStatus.OFFLINE,\n  })\n  status: UserStatus;\n\n  @Column({ nullable: true })\n  @Exclude()\n  hashedRefreshToken?: string;\n\n  @Column({ nullable: true })\n  twoFactorSecret?: string;\n\n  @Column({ default: false })\n  isTwoFactorAuthenticationEnabled: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteUser\n                            \n                            \n                                    Async\n                                getUserAvatar\n                            \n                            \n                                    Async\n                                getUserInfo\n                            \n                            \n                                updateUserAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteUser\n                        \n                    \n                \n            \n            \n                \ndeleteUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()@ApiOperation({summary: 'delete user'})@UseGuards(JwtTwoFactorGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserAvatar(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('avatar')@ApiOperation({summary: 'get user avatar image byte array'})@UseGuards(JwtTwoFactorGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserInfo(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiSecurity('JWT access token')@UseGuards(JwtTwoFactorGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserAvatar\n                        \n                    \n                \n            \n            \n                \nupdateUserAvatar(req, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('avatar')@ApiOperation({summary: 'change user avatar image (3MB Limit, jpeg, bmp, jpg, png) '})@UseInterceptors(undefined)@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  FileTypeValidator,\n  Get,\n  MaxFileSizeValidator,\n  ParseFilePipe,\n  Put,\n  Req,\n  Res,\n  StreamableFile,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiOperation, ApiSecurity, ApiTags } from '@nestjs/swagger';\nimport { Response } from 'express';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { JwtTwoFactorGuard } from 'src/auth/guards/jwt-two-factor.guard';\nimport { UsersService } from './users.service';\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly userService: UsersService) {}\n\n  //   @Post('signup')\n  //   @ApiOperation({\n  //     summary: 'sign up',\n  //     description: '42 Pong sign up 42 access token required',\n  //   })\n  //   @ApiConflictResponse({ description: 'nickname exists' })\n  //   @ApiCreatedResponse({\n  //     description: 'sign up success',\n  //     schema: { example: { accessToken: 'xxx', refreshToken: 'xxx' } },\n  //   })\n  //   @ApiSecurity('42 access token')\n  //   @UseGuards(FourtyTwoGuard)\n  //   signUp(@Body() createUserDto: CreateUserDto, @Req() req) {\n  //     const { id, image } = req.user;\n  //     const { link } = image;\n  //     return this.userService.signUp(createUserDto, id, link);\n  //   }\n\n  @Get()\n  @ApiSecurity('JWT access token')\n  @UseGuards(JwtTwoFactorGuard)\n  async getUserInfo(@Req() req) {\n    return req.user;\n  }\n\n  @Get('avatar')\n  @ApiOperation({ summary: 'get user avatar image byte array' })\n  @UseGuards(JwtTwoFactorGuard)\n  async getUserAvatar(@Req() req, @Res({ passthrough: true }) res: Response) {\n    const avatar = await this.userService.getUserAvatar(req.user.id);\n\n    res.set({\n      'Content-Type': 'image',\n      'Content-Disposition': 'inline',\n    });\n\n    return new StreamableFile(avatar);\n  }\n\n  @Delete()\n  @ApiOperation({ summary: 'delete user' })\n  @UseGuards(JwtTwoFactorGuard)\n  deleteUser(@Req() req) {\n    return this.userService.deleteUser(req.user.id);\n  }\n\n  @Put('avatar')\n  @ApiOperation({\n    summary: 'change user avatar image (3MB Limit, jpeg, bmp, jpg, png) ',\n  })\n  @UseInterceptors(FileInterceptor('file'))\n  @UseGuards(JwtAuthGuard)\n  updateUserAvatar(\n    @Req() req,\n    @UploadedFile(\n      new ParseFilePipe({\n        validators: [\n          new MaxFileSizeValidator({ maxSize: 1024 * 1024 * 3 }),\n          new FileTypeValidator({\n            fileType: 'image/(jpg|jpeg|png|bmp)',\n          }),\n        ],\n      }),\n    )\n    file: Express.Multer.File,\n  ) {\n    this.userService.updateUserAvatar(req.user.id, file.buffer);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users.entity';\nimport { HttpModule } from '@nestjs/axios';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), HttpModule],\n  providers: [UsersService],\n  controllers: [UsersController],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getAvatarFromWeb\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getUserAvatar\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenValid\n                            \n                            \n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    Async\n                                setCurrentRefreshToken\n                            \n                            \n                                    Async\n                                setTwoFactorAuthenticationSecret\n                            \n                            \n                                    Async\n                                turnOffTwoFactorAuthentication\n                            \n                            \n                                    Async\n                                turnOnTwoFactorAuthentication\n                            \n                            \n                                    Async\n                                updateUserAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAvatarFromWeb\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAvatarFromWeb(url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserAvatar(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserIfRefreshTokenValid\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenValid(refreshToken: string, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshToken(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setCurrentRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentRefreshToken(refreshToken: string, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setTwoFactorAuthenticationSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTwoFactorAuthenticationSecret(id: number, secret: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    secret\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOffTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOffTwoFactorAuthentication(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOnTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOnTwoFactorAuthentication(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserAvatar(id: number, data: Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger('User Serivce')\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Injectable, Logger, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { AxiosError } from 'axios';\nimport { catchError, firstValueFrom } from 'rxjs';\nimport { Repository, UpdateResult } from 'typeorm';\nimport { User } from './users.entity';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UsersService {\n  private logger: Logger = new Logger('User Serivce');\n\n  constructor(\n    @InjectRepository(User) private readonly userRepository: Repository,\n    private readonly httpService: HttpService,\n  ) {}\n\n  async setTwoFactorAuthenticationSecret(id: number, secret: string) {\n    return await this.userRepository.update(\n      { id },\n      { twoFactorSecret: secret },\n    );\n  }\n\n  async setCurrentRefreshToken(refreshToken: string, id: number) {\n    const hashedRefreshToken = await bcrypt.hash(refreshToken, 10);\n    await this.userRepository.update({ id }, { hashedRefreshToken });\n  }\n\n  async getUserIfRefreshTokenValid(refreshToken: string, id: number) {\n    const user = await this.getById(id);\n    const isRefreshTokenMatch = bcrypt.compare(\n      refreshToken,\n      user.hashedRefreshToken,\n    );\n    if (isRefreshTokenMatch) {\n      return user;\n    }\n  }\n\n  async getAvatarFromWeb(url: string): Promise {\n    const { data } = await firstValueFrom(\n      this.httpService.get(url, { responseType: 'arraybuffer' }).pipe(\n        catchError((error: AxiosError) => {\n          this.logger.error(error);\n          throw new NotFoundException('invalid avatar url');\n        }),\n      ),\n    );\n    return data;\n  }\n\n  async removeRefreshToken(id: number): Promise {\n    return this.userRepository.update({ id }, { hashedRefreshToken: null });\n  }\n\n  //   async signUp(\n  //     createUserDto: CreateUserDto,\n  //     id: number,\n  //     avatarUrl: string,\n  //   ): Promise {\n  //     const isExist = await this.userRepository.findOneBy({\n  //       nickname: createUserDto.nickname,\n  //     });\n  //     if (isExist) {\n  //       throw new ConflictException('invalid nickname');\n  //     }\n\n  //     const avatar = await this.getAvatarFromWeb(avatarUrl);\n  //     const tokens = await this.authService.getTokens(id);\n\n  //     const user = this.userRepository.create({\n  //       id,\n  //       nickname: createUserDto.nickname,\n  //       avatar,\n  //       hashedRefreshToken: tokens.refreshToken,\n  //     });\n  //     this.userRepository.save(user);\n  //     console.log(user);\n  //     return tokens;\n  //   }\n\n  async turnOnTwoFactorAuthentication(id: number) {\n    return this.userRepository.update(\n      { id },\n      { isTwoFactorAuthenticationEnabled: true },\n    );\n  }\n\n  async turnOffTwoFactorAuthentication(id: number) {\n    return this.userRepository.update(\n      { id },\n      { isTwoFactorAuthenticationEnabled: false, twoFactorSecret: null },\n    );\n  }\n\n  async getById(id: number): Promise {\n    const user = await this.userRepository.findOneBy({ id });\n    if (!user) {\n      throw new NotFoundException(`user not found`);\n    }\n    return user;\n  }\n\n  async getUserAvatar(id: number): Promise {\n    const user = await this.getById(id);\n    return user.avatar;\n  }\n\n  async deleteUser(id: number) {\n    const deleteResult = await this.userRepository.delete({ id });\n    if (!deleteResult) {\n      throw new NotFoundException();\n    }\n  }\n\n  async updateUserAvatar(id: number, data: Buffer) {\n    const updateResult = await this.userRepository.update(\n      { id },\n      { avatar: data },\n    );\n    if (!updateResult.affected) {\n      throw new NotFoundException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/guards/fourty-two.guard.ts\n            \n            injectable\n            FourtyTwoGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-refresh-auth.guard.ts\n            \n            injectable\n            JwtRefreshAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-two-factor.guard.ts\n            \n            injectable\n            JwtTwoFactorGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/fourty-two.strategy.ts\n            \n            injectable\n            FourtyTwoStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt-refresh.strategy.ts\n            \n            injectable\n            JwtRefreshStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt-two-factor.strategy.ts\n            \n            injectable\n            JwtTwoFactorStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/token-payload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/two-factor-authentication/two-factor-auth.controller.ts\n            \n            controller\n            TwoFactorAuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/two-factor-authentication/two-factor-auth.service.ts\n            \n            injectable\n            TwoFactorAuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/two-factor-authentication/two-factor-auth.service.ts\n            \n            interface\n            QRCodeUrl\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/two-factor-authentication/two-factor-token.interface.ts\n            \n            interface\n            twoFactorToken\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/users.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/14)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^2.0.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.3.1\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.2\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.2.1\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @types/bcrypt : ^5.0.0\n        \n            axios : ^1.3.4\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            cookie-parser : ^1.4.6\n        \n            jest-mock : ^29.4.3\n        \n            joi : ^17.8.3\n        \n            passport : ^0.6.0\n        \n            passport-http-bearer : ^1.0.1\n        \n            passport-jwt : ^4.0.1\n        \n            passport-oauth2 : ^1.6.1\n        \n            pg : ^8.9.0\n        \n            qrcode : ^1.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            speakeasy : ^2.0.0\n        \n            typeorm : ^0.3.12\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostgresErrorCode   (src/.../postgresErrorCodes.enum.ts)\n                        \n                        \n                            UserStatus   (src/.../users.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/postgresErrorCodes.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostgresErrorCode\n                    \n                \n                        \n                            \n                                 UniqueViolation\n                            \n                        \n                        \n                            \n                                Value : 23505\n                            \n                        \n            \n        \n\n    src/users/users.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        UserStatus\n                    \n                \n                        \n                            \n                                 ONLINE\n                            \n                        \n                        \n                            \n                                Value : ONLINE\n                            \n                        \n                        \n                            \n                                 OFFLINE\n                            \n                        \n                        \n                            \n                                Value : OFFLINE\n                            \n                        \n                        \n                            \n                                 INGAME\n                            \n                        \n                        \n                            \n                                Value : INGAME\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n42 Pong\n42 Pong Backend Project\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2023 ++41 Transcendence\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nFourtyTwoStrategy\n\nFourtyTwoStrategy\n\nAuthModule -->\n\nFourtyTwoStrategy->AuthModule\n\n\n\n\n\nJwtRefreshStrategy\n\nJwtRefreshStrategy\n\nAuthModule -->\n\nJwtRefreshStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthModule -->\n\nJwtTwoFactorStrategy->AuthModule\n\n\n\n\n\nTwoFactorAuthService\n\nTwoFactorAuthService\n\nAuthModule -->\n\nTwoFactorAuthService->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/twoFactorToken.html":{"url":"interfaces/twoFactorToken.html","title":"interface - twoFactorToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  twoFactorToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/two-factor-authentication/two-factor-token.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface twoFactorToken {\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
